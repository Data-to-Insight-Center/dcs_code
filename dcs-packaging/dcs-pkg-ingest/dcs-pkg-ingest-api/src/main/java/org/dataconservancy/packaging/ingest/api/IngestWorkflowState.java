/*
 * Copyright 2012 Johns Hopkins University
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.dataconservancy.packaging.ingest.api;

import org.dataconservancy.dcs.ingest.EventManager;
import org.dataconservancy.packaging.model.Package;

/**
 * Exposes components used to manage the state of an ingest pipeline.  Typically, each ingest service will receive an
 * instance it can use to access and mutate the current state of the ingest pipeline.
 * <p/>
 * Components:
 * <dl>
 *     <dt>Event Manager</dt>
 *     <dd>Ingest services use the Event Manager to add events to the ingest workflow state, or to reason over
 *         events contributed by previous ingest services in the same workflow.</dd>
 *     <dt>Attribute Set Manager</dt>
 *     <dd>Ingest services use the AttributeSet Manager to add AttributeSets to the ingest workflow state, or to reason
 *         over AttributeSets contributed by previous ingest services in the same workflow.</dd>
 *     <dt>Package</dt>
 *     <dd>Ingest services are responsible for building a package model.  Multiple ingest services may contribute to
 *         the model as a ingest progresses.</dd>
 * </dl>
 */
public interface IngestWorkflowState {

    /**
     * The Event Manager maintains events that may be generated by ingest services in the workflow.
     *
     * @return the event manager, never {@code null}
     */
    public EventManager getEventManager();

    /**
     * The AttributeSet Manager maintains AttributeSets that may be generated/extracted by ingest services in the
     * workflow.
     *
     * @return the attribute set manager, never {@code null}
     */
    public AttributeSetManager getAttributeSetManager();

    /**
     * The BusinessObject Manager maintains the BusinessObjects that are built/modified by ingest services in the
     * workflow.
     *
     * @return the business object manager, never {@code null}
     */
    public BusinessObjectManager getBusinessObjectManager();

    /**
     * The Package is built by various ingest services in the the workflow.
     *
     * @return the package, never {@code null}
     */
    public Package getPackage();

    /**
     * The integer representing which workflow phase the ingest is in. When the ingest process is at a paused state,
     * a phase is still considered the current phase after the pause until current phase is advanced by the bootstrapper.
     *
     * @return the current ingest phase, or {@code null} if it's not set
     */
    public IngestPhase getIngestPhase();
    
    /**
     * Sets what phase the ingest is in.
     */
    public void setIngestPhase(IngestPhase ingestPhase);

    /**
     * Returns true if this ingest has received a cancellation request.  By default this method returns {@code false}
     * unless {@link #setCancelled()} has been called.
     *
     * @return true if the ingest has received a cancellation request
     */
    public boolean isCancelled();

    /**
     * Sets the cancellation flag to true, indicating that the deposit should be cancelled.  Invoking this method
     * multiple times should have no effect: once the cancellation flag has been set to {@code true}, it should remain
     * unchanged.
     */
    public void setCancelled();
    
    /**
     * Sets the id of the user attempting to ingest the package.
     * @param userId The string representation of the user id.
     */
    public void setIngestUserId(String userId);
    
    /**
     * Returns the id of the user ingesting the package.
     * @return A string representing the user id.
     */
    public String getIngestUserId();

}
